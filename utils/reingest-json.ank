# Module to re-ingest entries in JSON format
# Each enumerated value becomes a field in the resulting JSON structure.
# Call SetTag to specify the tag to use for ingestion
# Call Ingest with the entry as the first argument and either a time.Time
# or nil as the second argument. If nil is specified, each JSON-formatted
# entry will use the timestamp of the original entry.
# rj = reingest_json
# rj.SetTag("alerts")
# results, err = executeSearch(query, start, end)
# for e in results {
#	 rj.Ingest(e, nil)
# }

MinVer(3, 3, 1) #require at least 3.3.1

require("utils/links.ank", `14ceec90b69943992f4efae8fc9e24c3f4767944`)

module reingest_json {
	var tag = ""
	var name = nil
	var msg  = ""
	var aid = nil
	var m = make(map[string]interface)
	var time = import("time")
	var uuid = import("google/uuid")
	var json = import("encoding/json")

	func Init(_tag, _name) {
		m = make(map[string]interface)
		aid = uuid.New()
		tag = _tag
		name = _name
		m["AlertName"] = _name
	}

	func SetTag(t) {
		tag = t
	}
	
	func SetHeaderValue(k, v) {
		m[toString(k)] = v
	}

	func IngestID() {
		if aid == nil {
			aid = uuid.New()
		}
		return aid
	}

	func OverrideID(v) {
		aid = v
	}

	func SetAlertName(v) {
		name = v
		m["AlertName"] = v
	}

	func AlertLink(server, s, e, desc) {
		q = ""
		if tag != "" {
			q += `tag=` + tag + ` `
		}
		q += `json AlertID=="` + toString(aid) + `"`
		var ln = link
		ln.Init(server + "/#/search/launch")
		ln.AddParam("query", q)
		ln.AddParam("start", s)
		if e != nil {
			ln.AddParam("end", e)
		}
		if desc == nil || len(desc) == "" {
			desc = `LINK`
		}
		return ln.HtmlEncode(desc)
	}

	func CategoryLink(server, s, e, desc) {
		q = ""
		if tag != "" {
			q += `tag=` + tag + ` `
		}
		if name != "" {
			q += `json AlertName==` + name
		}
		var ln = link
		ln.Init(server + "/#/search/launch")
		ln.AddParam("query", q)
		ln.AddParam("start", s)
		if e != nil {
			ln.AddParam("end", e)
		}
		if desc == nil || len(desc) == "" {
			desc = `LINK`
		}
		return ln.HtmlEncode(desc)
	}

	
	func Ingest(ent, ts) {
		if tag == "" {
			return "no tag specified"
		}
		if ts == nil { 
			ts = time.Now()
		}
		// build the data
		var pkg = make(map[string]interface)
		for ep in ent.Enumerated {
			pkg[ep.Name] = ep.Value.GetInterfaceValue()
		}
		m["AlertID"] = IngestID()
		m["data"] = pkg
		var data = nil
		var err = ""
		data, err = json.Marshal(m)
		if err != nil {
			return err
		}
		var nent = newEntry(ts, data)
		return ingestEntries([nent], tag)
	}
}
